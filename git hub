1. What is Version Control & Why Use GitHub?
Version control is a way to track changes in your code over time. It helps you:

Keep a history of changes.
Undo mistakes by going back to an earlier version.
Work with others without messing up each other’s code.
Why GitHub?

It stores your code online, so you won’t lose it.
It makes teamwork easy by letting people suggest and review changes.
It helps you keep different versions of your code organized.
2. How to Set Up a GitHub Repository
A repository (or “repo”) is like a folder that stores your project.

Steps to Create a New Repo on GitHub:

Log in to GitHub.
Click the ‘+’ icon in the top-right and select “New repository.”
Give your repo a name (something short but clear).
Add a description (optional but helpful).
Choose ‘Public’ or ‘Private’ (see next section for the difference).
Click ‘Create repository.’
Important Choices:

Public or Private? Public is open to everyone, private is just for you and invited people.
Add a README file? This helps explain your project.
Add a .gitignore file? This tells Git which files to ignore.
Choose a license? This decides how others can use your code.
3. Why is the README File Important?
A README file explains what your project is about. A good README should include:

Project Name – What’s it called?
Description – What does it do?
How to Install & Use – Simple steps to start using it.
Who Made It – Your name or your team’s name.
How to Contribute – If others want to help, tell them how.
A clear README helps others understand your project and encourages them to contribute.

4. Public vs. Private Repositories
Public Repo: Anyone can see and use your code. Good for open-source projects.
Private Repo: Only you (and people you invite) can see it. Good for personal or company projects.
Pros & Cons:

Type	Pros	Cons
Public	More people can help & find bugs	Anyone can copy it
Private	Keeps code secret & secure	Fewer people can help
5. Making Your First Commit
A commit is like taking a snapshot of your project. It saves your changes so you can go back later if needed.

Steps to Make a Commit:

Make changes to your code.
Stage your files with git add <filename> (or git add . for all files).
Commit your changes with git commit -m "Write a short message about the changes."
Push to GitHub with git push origin main (this uploads your changes).
6. What is Branching & Why is it Useful?
Branches let you create a separate copy of your project to work on new features without messing up the main code.

Steps to Use Branches:

Create a branch → git branch feature-branch
Switch to the branch → git checkout feature-branch
Work on your changes and commit them.
Merge it back into the main project when it’s ready → git merge feature-branch
Branches help teams work on different parts of a project at the same time.

7. What is a Pull Request?
A pull request (PR) is when you ask to merge your changes into the main project. It lets others review and approve your work before adding it to the main code.

How to Make a Pull Request:

Push your branch to GitHub.
Click ‘New Pull Request’ on GitHub.
Describe your changes.
Ask for a review.
Once approved, merge it!
PRs keep the project organized and make sure no bad code gets added.

8. Forking vs. Cloning
Forking: Copies someone else’s repo to your GitHub account. You can make changes without affecting the original.
Cloning: Downloads a repo to your computer so you can work on it locally.
When to Fork?

If you want to contribute to an open-source project but don’t have permission to edit it directly.
9. GitHub Issues & Project Boards
GitHub Issues help keep track of problems, tasks, and improvements.
Project Boards organize tasks into columns like To Do, In Progress, and Done to manage work efficiently.

Example Uses:

Issues: Reporting bugs, suggesting features, tracking progress.
Project Boards: Managing tasks for big projects, assigning work to team members.
10. Common Problems & Best Practices
Challenges for Beginners:

Merge Conflicts – When two people change the same file, Git gets confused.
Messy Commit History – Too many commits with unclear messages make it hard to track changes.
Forgetting to Pull – If you don’t pull the latest changes before working, your code might be outdated.

